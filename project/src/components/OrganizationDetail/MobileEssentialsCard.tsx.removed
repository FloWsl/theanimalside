// src/components/OrganizationDetail/MobileEssentialsCard.tsx
import React from 'react';
import { motion } from 'framer-motion';
import { 
  Calendar, 
  Clock, 
  MapPin, 
  Users, 
  DollarSign, 
  CheckCircle, 
  Heart 
} from 'lucide-react';
import { Card, CardContent } from '../ui/card';
import { OrganizationDetail, Program } from '../../types';

interface MobileEssentialsCardProps {
  organization: OrganizationDetail;
  selectedProgram: Program;
  className?: string;
}

const MobileEssentialsCard: React.FC<MobileEssentialsCardProps> = ({ 
  organization, 
  selectedProgram,
  className = '' 
}) => {
  // Calculate next start date (simplified logic for demo)
  const getNextStartDate = () => {
    if (selectedProgram.schedule.startDates.includes('Every Monday')) {
      const nextMonday = new Date();
      nextMonday.setDate(nextMonday.getDate() + (1 + 7 - nextMonday.getDay()) % 7);
      return nextMonday.toLocaleDateString('en-US', { 
        month: 'short', 
        day: 'numeric' 
      });
    }
    return 'Contact for dates';
  };

  // Format cost display
  const formatCost = () => {
    if (selectedProgram.cost.amount === null || selectedProgram.cost.amount === 0) {
      return 'FREE';
    }
    return `${selectedProgram.cost.currency} ${selectedProgram.cost.amount}/${selectedProgram.cost.period}`;
  };

  // Get key requirements for quick view
  const getKeyRequirements = () => {
    const requirements = [];
    if (organization.ageRequirement.min) {
      requirements.push(`${organization.ageRequirement.min}+ years`);
    }
    if (selectedProgram.requirements.length > 0) {
      requirements.push(selectedProgram.requirements[0]);
    }
    return requirements.slice(0, 2); // Show max 2 requirements
  };

  return (
    <motion.div
      className={`lg:hidden sticky top-4 z-20 mb-6 ${className}`}
      initial={{ opacity: 0, y: -20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5, ease: "easeOut" }}
    >
      <Card className="bg-white/95 backdrop-blur-sm border-2 border-sage-green/20 shadow-lg">
        <CardContent className="p-4">
          {/* Header Row */}
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center gap-2">
              {organization.verified && (
                <div className="flex items-center gap-1 px-2 py-1 bg-sage-green/10 rounded-full">
                  <CheckCircle className="w-3 h-3 text-sage-green" />
                  <span className="text-xs font-medium text-sage-green">Verified</span>
                </div>
              )}
              <div className="text-xs text-deep-forest/70 font-medium">
                {organization.location.city}, {organization.location.country}
              </div>
            </div>
            <Heart className="w-5 h-5 text-deep-forest/40 hover:text-rich-earth transition-colors cursor-pointer" />
          </div>

          {/* Essential Info Grid */}
          <div className="grid grid-cols-2 gap-4">
            {/* Cost */}
            <div className="flex items-center gap-2">
              <div className="p-2 bg-rich-earth/10 rounded-lg">
                <DollarSign className="w-4 h-4 text-rich-earth" />
              </div>
              <div>
                <div className="text-sm font-bold text-deep-forest">
                  {formatCost()}
                </div>
                <div className="text-xs text-deep-forest/60">
                  {selectedProgram.cost.includes.length > 0 ? 'Includes meals & stay' : 'Cost per week'}
                </div>
              </div>
            </div>

            {/* Duration */}
            <div className="flex items-center gap-2">
              <div className="p-2 bg-warm-sunset/10 rounded-lg">
                <Clock className="w-4 h-4 text-warm-sunset" />
              </div>
              <div>
                <div className="text-sm font-bold text-deep-forest">
                  {selectedProgram.duration.min}-{selectedProgram.duration.max || 'âˆž'} weeks
                </div>
                <div className="text-xs text-deep-forest/60">Duration</div>
              </div>
            </div>

            {/* Next Start */}
            <div className="flex items-center gap-2">
              <div className="p-2 bg-sage-green/10 rounded-lg">
                <Calendar className="w-4 h-4 text-sage-green" />
              </div>
              <div>
                <div className="text-sm font-bold text-deep-forest">
                  {getNextStartDate()}
                </div>
                <div className="text-xs text-deep-forest/60">Next start</div>
              </div>
            </div>

            {/* Age Requirement */}
            <div className="flex items-center gap-2">
              <div className="p-2 bg-golden-hour/10 rounded-lg">
                <Users className="w-4 h-4 text-golden-hour" />
              </div>
              <div>
                <div className="text-sm font-bold text-deep-forest">
                  {organization.ageRequirement.min}+ years
                </div>
                <div className="text-xs text-deep-forest/60">Minimum age</div>
              </div>
            </div>
          </div>

          {/* Key Requirements */}
          {getKeyRequirements().length > 0 && (
            <div className="mt-4 pt-3 border-t border-sage-green/10">
              <div className="text-xs font-medium text-deep-forest/80 mb-2">Key Requirements:</div>
              <div className="flex flex-wrap gap-1">
                {getKeyRequirements().map((req, index) => (
                  <span 
                    key={index}
                    className="text-xs px-2 py-1 bg-deep-forest/5 text-deep-forest/70 rounded-full"
                  >
                    {req}
                  </span>
                ))}
              </div>
            </div>
          )}

          {/* Quick Stats Bar */}
          <div className="mt-4 pt-3 border-t border-sage-green/10">
            <div className="flex items-center justify-between text-xs text-deep-forest/60">
              <span>{organization.statistics.volunteersHosted.toLocaleString()} volunteers hosted</span>
              <span>{organization.statistics.yearsOperating} years operating</span>
            </div>
          </div>
        </CardContent>
      </Card>
    </motion.div>
  );
};

export default MobileEssentialsCard;