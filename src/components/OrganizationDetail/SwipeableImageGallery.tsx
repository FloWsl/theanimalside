// src/components/OrganizationDetail/SwipeableImageGallery.tsx\nimport React, { useState, useRef, useEffect } from 'react';\nimport { motion, AnimatePresence, useDragControls, PanInfo } from 'framer-motion';\nimport { \n  ChevronLeft, \n  ChevronRight, \n  X, \n  ZoomIn,\n  Download,\n  Share2,\n  Heart,\n  Play\n} from 'lucide-react';\nimport { MediaItem } from '../../types';\nimport ResponsiveImage from './ResponsiveImage';\nimport { Button } from '../ui/button';\n\ninterface SwipeableImageGalleryProps {\n  media: MediaItem[];\n  initialIndex?: number;\n  onClose?: () => void;\n  showThumbnails?: boolean;\n  enableZoom?: boolean;\n  enableShare?: boolean;\n  className?: string;\n}\n\nconst SwipeableImageGallery: React.FC<SwipeableImageGalleryProps> = ({\n  media,\n  initialIndex = 0,\n  onClose,\n  showThumbnails = true,\n  enableZoom = true,\n  enableShare = true,\n  className = ''\n}) => {\n  const [currentIndex, setCurrentIndex] = useState(initialIndex);\n  const [isZoomed, setIsZoomed] = useState(false);\n  const [touchStart, setTouchStart] = useState<number | null>(null);\n  const [touchEnd, setTouchEnd] = useState<number | null>(null);\n  const [isAutoPlaying, setIsAutoPlaying] = useState(false);\n  \n  const dragControls = useDragControls();\n  const containerRef = useRef<HTMLDivElement>(null);\n  const imageRef = useRef<HTMLDivElement>(null);\n  \n  // Minimum swipe distance in pixels\n  const minSwipeDistance = 75;\n  \n  // Auto-play interval (for video-like experience)\n  const autoPlayInterval = 5000;\n  \n  // Auto-play functionality\n  useEffect(() => {\n    if (!isAutoPlaying || media.length <= 1) return;\n    \n    const interval = setInterval(() => {\n      setCurrentIndex(prev => (prev + 1) % media.length);\n    }, autoPlayInterval);\n    \n    return () => clearInterval(interval);\n  }, [isAutoPlaying, media.length]);\n  \n  // Keyboard navigation\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      switch (e.key) {\n        case 'ArrowLeft':\n          navigateTo('prev');\n          break;\n        case 'ArrowRight':\n          navigateTo('next');\n          break;\n        case 'Escape':\n          if (onClose) onClose();\n          break;\n        case ' ':\n          e.preventDefault();\n          setIsAutoPlaying(prev => !prev);\n          break;\n      }\n    };\n    \n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [onClose]);\n  \n  const navigateTo = (direction: 'prev' | 'next' | number) => {\n    if (typeof direction === 'number') {\n      setCurrentIndex(direction);\n    } else {\n      const newIndex = direction === 'prev' \n        ? (currentIndex - 1 + media.length) % media.length\n        : (currentIndex + 1) % media.length;\n      setCurrentIndex(newIndex);\n    }\n    setIsZoomed(false); // Reset zoom when navigating\n  };\n  \n  // Touch handlers for swipe navigation\n  const handleTouchStart = (e: React.TouchEvent) => {\n    setTouchEnd(null);\n    setTouchStart(e.targetTouches[0].clientX);\n  };\n  \n  const handleTouchMove = (e: React.TouchEvent) => {\n    setTouchEnd(e.targetTouches[0].clientX);\n  };\n  \n  const handleTouchEnd = () => {\n    if (!touchStart || !touchEnd) return;\n    \n    const distance = touchStart - touchEnd;\n    const isLeftSwipe = distance > minSwipeDistance;\n    const isRightSwipe = distance < -minSwipeDistance;\n    \n    if (isLeftSwipe && media.length > 1) {\n      navigateTo('next');\n    }\n    if (isRightSwipe && media.length > 1) {\n      navigateTo('prev');\n    }\n  };\n  \n  // Drag handler for desktop/tablet\n  const handleDragEnd = (event: MouseEvent | TouchEvent | PointerEvent, info: PanInfo) => {\n    const threshold = 100;\n    \n    if (Math.abs(info.offset.x) > threshold) {\n      if (info.offset.x > 0) {\n        navigateTo('prev');\n      } else {\n        navigateTo('next');\n      }\n    }\n  };\n  \n  const handleShare = async () => {\n    const currentMedia = media[currentIndex];\n    const shareData = {\n      title: currentMedia.caption,\n      text: currentMedia.altText,\n      url: currentMedia.url\n    };\n    \n    if (navigator.share) {\n      try {\n        await navigator.share(shareData);\n      } catch (err) {\n        // Fallback to copying URL\n        navigator.clipboard.writeText(currentMedia.url);\n      }\n    } else {\n      // Fallback to copying URL\n      navigator.clipboard.writeText(currentMedia.url);\n    }\n  };\n  \n  const handleDownload = () => {\n    const currentMedia = media[currentIndex];\n    const link = document.createElement('a');\n    link.href = currentMedia.url;\n    link.download = `${currentMedia.caption || 'image'}.jpg`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n  \n  const currentMedia = media[currentIndex];\n  \n  if (!currentMedia) return null;\n  \n  return (\n    <div className={`relative bg-black/95 ${className}`}>\n      {/* Main Image/Video Container */}\n      <div \n        ref={containerRef}\n        className=\"relative h-full flex items-center justify-center overflow-hidden\"\n        onTouchStart={handleTouchStart}\n        onTouchMove={handleTouchMove}\n        onTouchEnd={handleTouchEnd}\n      >\n        <AnimatePresence mode=\"wait\">\n          <motion.div\n            key={currentIndex}\n            ref={imageRef}\n            initial={{ opacity: 0, x: 300 }}\n            animate={{ opacity: 1, x: 0 }}\n            exit={{ opacity: 0, x: -300 }}\n            transition={{ type: \"spring\", damping: 25, stiffness: 300 }}\n            drag=\"x\"\n            dragConstraints={{ left: 0, right: 0 }}\n            dragElastic={0.1}\n            onDragEnd={handleDragEnd}\n            className={`relative max-w-full max-h-full cursor-grab active:cursor-grabbing ${\n              isZoomed ? 'cursor-zoom-out' : 'cursor-zoom-in'\n            }`}\n            onClick={() => enableZoom && setIsZoomed(!isZoomed)}\n            style={{\n              scale: isZoomed ? 1.5 : 1,\n              transition: 'scale 0.3s ease'\n            }}\n          >\n            {currentMedia.type === 'video' ? (\n              <div className=\"relative aspect-video bg-black rounded-lg overflow-hidden max-w-4xl max-h-[80vh]\">\n                <iframe\n                  src={currentMedia.url}\n                  title={currentMedia.caption}\n                  className=\"w-full h-full\"\n                  allowFullScreen\n                />\n                <div className=\"absolute top-4 left-4 bg-red-500/80 text-white px-2 py-1 rounded flex items-center gap-1\">\n                  <Play className=\"w-3 h-3\" />\n                  <span className=\"text-xs font-medium\">Video</span>\n                </div>\n              </div>\n            ) : (\n              <ResponsiveImage\n                src={currentMedia.url}\n                alt={currentMedia.altText}\n                className=\"max-w-4xl max-h-[80vh] rounded-lg\"\n                aspectRatio=\"auto\"\n                priority={true}\n                placeholder=\"blur\"\n              />\n            )}\n            \n            {/* Zoom Indicator */}\n            {enableZoom && !isZoomed && currentMedia.type === 'image' && (\n              <div className=\"absolute top-4 right-4 bg-black/50 backdrop-blur-sm text-white p-2 rounded-lg opacity-0 hover:opacity-100 transition-opacity\">\n                <ZoomIn className=\"w-4 h-4\" />\n              </div>\n            )}\n          </motion.div>\n        </AnimatePresence>\n        \n        {/* Navigation Arrows */}\n        {media.length > 1 && (\n          <>\n            <Button\n              onClick={() => navigateTo('prev')}\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"absolute left-4 top-1/2 -translate-y-1/2 bg-black/30 backdrop-blur-sm text-white hover:bg-black/50 h-12 w-12 touch-manipulation\"\n              aria-label=\"Previous image\"\n            >\n              <ChevronLeft className=\"w-6 h-6\" />\n            </Button>\n            \n            <Button\n              onClick={() => navigateTo('next')}\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"absolute right-4 top-1/2 -translate-y-1/2 bg-black/30 backdrop-blur-sm text-white hover:bg-black/50 h-12 w-12 touch-manipulation\"\n              aria-label=\"Next image\"\n            >\n              <ChevronRight className=\"w-6 h-6\" />\n            </Button>\n          </>\n        )}\n      </div>\n      \n      {/* Top Controls */}\n      <div className=\"absolute top-4 left-4 right-4 flex items-center justify-between z-10\">\n        {/* Image Counter */}\n        <div className=\"bg-black/50 backdrop-blur-sm text-white px-3 py-1 rounded-lg text-sm font-medium\">\n          {currentIndex + 1} / {media.length}\n        </div>\n        \n        {/* Action Buttons */}\n        <div className=\"flex items-center gap-2\">\n          {enableShare && (\n            <Button\n              onClick={handleShare}\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"bg-black/30 backdrop-blur-sm text-white hover:bg-black/50 h-10 w-10 touch-manipulation\"\n              aria-label=\"Share image\"\n            >\n              <Share2 className=\"w-4 h-4\" />\n            </Button>\n          )}\n          \n          <Button\n            onClick={handleDownload}\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"bg-black/30 backdrop-blur-sm text-white hover:bg-black/50 h-10 w-10 touch-manipulation\"\n            aria-label=\"Download image\"\n          >\n            <Download className=\"w-4 h-4\" />\n          </Button>\n          \n          {onClose && (\n            <Button\n              onClick={onClose}\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"bg-black/30 backdrop-blur-sm text-white hover:bg-black/50 h-10 w-10 touch-manipulation\"\n              aria-label=\"Close gallery\"\n            >\n              <X className=\"w-4 h-4\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      \n      {/* Bottom Caption and Info */}\n      <div className=\"absolute bottom-4 left-4 right-4 z-10\">\n        <div className=\"bg-black/50 backdrop-blur-sm text-white rounded-lg p-4 space-y-2\">\n          <h3 className=\"font-medium\">{currentMedia.caption}</h3>\n          {currentMedia.credit && (\n            <p className=\"text-sm text-white/70\">© {currentMedia.credit}</p>\n          )}\n        </div>\n      </div>\n      \n      {/* Thumbnail Strip */}\n      {showThumbnails && media.length > 1 && (\n        <div className=\"absolute bottom-20 left-0 right-0 z-10\">\n          <div className=\"flex justify-center\">\n            <div className=\"flex space-x-2 bg-black/30 backdrop-blur-sm rounded-lg p-2 max-w-md overflow-x-auto scrollbar-hide\">\n              {media.map((item, index) => (\n                <button\n                  key={item.id}\n                  onClick={() => navigateTo(index)}\n                  className={`flex-shrink-0 w-12 h-12 rounded overflow-hidden border-2 transition-all touch-manipulation ${\n                    index === currentIndex \n                      ? 'border-white scale-110' \n                      : 'border-transparent hover:border-white/50'\n                  }`}\n                >\n                  <img \n                    src={item.type === 'video' ? item.thumbnail || item.url : item.url}\n                    alt={`Thumbnail ${index + 1}`}\n                    className=\"w-full h-full object-cover\"\n                  />\n                  {item.type === 'video' && (\n                    <div className=\"absolute inset-0 flex items-center justify-center\">\n                      <Play className=\"w-3 h-3 text-white\" />\n                    </div>\n                  )}\n                </button>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {/* Auto-play Controls */}\n      {media.length > 1 && (\n        <div className=\"absolute top-1/2 left-4 -translate-y-1/2 z-10\">\n          <Button\n            onClick={() => setIsAutoPlaying(!isAutoPlaying)}\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"bg-black/30 backdrop-blur-sm text-white hover:bg-black/50 touch-manipulation\"\n            aria-label={isAutoPlaying ? 'Pause slideshow' : 'Start slideshow'}\n          >\n            {isAutoPlaying ? '⏸️' : '▶️'}\n          </Button>\n        </div>\n      )}\n      \n      {/* Swipe Indicators */}\n      <div className=\"absolute bottom-2 left-1/2 -translate-x-1/2 flex space-x-1 z-10\">\n        {media.map((_, index) => (\n          <button\n            key={index}\n            onClick={() => navigateTo(index)}\n            className={`w-2 h-2 rounded-full transition-all touch-manipulation ${\n              index === currentIndex \n                ? 'bg-white scale-125' \n                : 'bg-white/40 hover:bg-white/70'\n            }`}\n            aria-label={`Go to image ${index + 1}`}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default SwipeableImageGallery;